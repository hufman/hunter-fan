#!/usr/bin/env python
 
import sys
import time
import bottle
from rflib import *
from struct import *
baudRate = 5280
d = None
 
def ConfigureD(d, keyLen):
	d.setMdmModulation(MOD_ASK_OOK)
	d.setFreq(347999900)
	d.makePktFLEN(keyLen)
	d.setMdmSyncMode(0)
	d.setMdmDRate(baudRate)
	d.setMdmChanSpc(100000)
	d.setChannel(20)
	d.setPower(40)
	#d.setMaxPower()
 
commands = {
	'fan0': '1001',
	'fan1': '0001',
	'fan2': '0010',
	'fan3': '0100',
	'light': '1000'
}
dip_switches = {
	# the dip switches in the remote
	# bridging the pin is a 1, open is 0
	# and the digits are backwards: dip #4 (leftmost) is right bit
	'bedroom': '1111',
	'office': '1101',
	'livingroom': '1011',
	'diningroom': '0111'
}

def encode(bin_key):
	#print "Binary (NON PWM) key:",bin_key
	pwm_str_key = "001" #added leading 0 for clock
	for k in bin_key:
		x = ""
		if(k == "0"):
			x = "001" #  A zero is encoded as a longer low pulse (low-low-high)
		if(k == "1"):
			x = "011" # and a one is encoded as a shorter low pulse (low-high-high)
		pwm_str_key = pwm_str_key + x
	pwm_str_key = pwm_str_key + "00"
	#print "Binary (PWM) key:",pwm_str_key
	dec_pwm_key = int(pwm_str_key,2);
	#print "Decimal (PWN) key:",dec_pwm_key
	key_packed = pack(">Q",dec_pwm_key)
	return key_packed

def send_command(bin_key, repeat=50):
	key_packed = encode(bin_key)
	broadcast = key_packed + '\0'*2
	keyLen = len(key_packed)
	global d
	if d is None:
		d = RfCat()
	ConfigureD(d, keyLen)
	d.RFxmit(broadcast, repeat=50)
	d.setModeIDLE()

@bottle.post('/fans/<name>/fanspeed')
def set_fanspeed(name):
	if name not in dip_switches:
		bottle.abort(404)
	speed = bottle.request.body.read().strip()
	print(speed)
	bin_key = '0%s111%s' % (dip_switches[name][::-1], commands['fan'+speed])
	send_command(bin_key)

@bottle.post('/lights/<name>')
def toggle_light(name):
	if name not in dip_switches:
		bottle.abort(404)
	bin_key = '0%s111%s' % (dip_switches[name][::-1], commands['light'])
	send_command(bin_key)

bottle.run(host='0.0.0.0', port=3350)
